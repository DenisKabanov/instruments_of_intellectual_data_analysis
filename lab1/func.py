import numpy as np
from numba import njit

@njit #====================== использовать ли numba компилятор для функции ============================
def match_timestamps_naive(timestamps1: np.ndarray, timestamps2: np.ndarray) -> np.ndarray: 
# так как в задании первая камера пишет в ~30 fps -> размер первого массива n; вторая камера пишет в ~60 fps -> размер второго массива 2n; сокращаем на константы и получаем n
# делаем для каждого элемента первого массива: - O(n)
#   из всех элементов второго массива вычитается элемент первого массива (считаем delta) за O(2n) ~ O(n)
#   в получившихся delta ищем наименьший элемент за O(2n) ~ O(n)
# итоговая сложность: O(размер_первого_массива * (размер_второго_массива + размер_второго_массива)) = O(n*(2n+2n)) = O(4n^2) ~ O(n^2)
    frames_count = timestamps1.shape[0] # число кадров на камере 1
    correspondence = np.zeros(frames_count, dtype=np.int32) # создаём массив под номера кадров с типом int32 для уменьшения потребляемой памяти

    #===================== вариант с циклом в np.arange ================================================
    # for frame in np.arange(frames_count): # идём по номерам кадров
    #--------------------- вариант с циклом в enumerate ------------------------------------------------
    for frame, frame_time in enumerate(timestamps1): # идём по кадрам
    #===================================================================================================
        #===================== вариант с сохранением delta =============================================
        # deltas = np.absolute(timestamps2 - timestamps1[frame]) # считаем разницу между временами
        # correspondence[frame] = deltas.argmin() # берём номер кадра с наименьшей разницей
        #--------------------- вариант без сохранения delta --------------------------------------------
        correspondence[frame] = np.absolute(timestamps2 - frame_time).argmin() # цикл с enumerate
        # correspondence[frame] = np.absolute(timestamps2 - timestamps1[frame]).argmin() # цикл с np.arange
        #===============================================================================================

    return correspondence